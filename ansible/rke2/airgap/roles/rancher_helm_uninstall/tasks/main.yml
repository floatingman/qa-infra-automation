---
# Uninstall Rancher from RKE2 cluster using Helm from bastion server
- name: Uninstall Rancher from RKE2 cluster
  when: uninstall_rancher | default(false) | bool
  tags:
    - rancher
    - helm
    - uninstall
  block:
    - name: Check if kubectl is configured on bastion
      ansible.builtin.stat:
        path: "{{ kubeconfig_path }}"
      register: kubeconfig_file

    - name: Fail if kubectl is not configured
      ansible.builtin.fail:
        msg: "kubectl is not configured on bastion. Run setup-kubectl-access.yml first."
      when: not kubeconfig_file.stat.exists

    - name: Install Helm if not present
      ansible.builtin.get_url:
        url: "https://get.helm.sh/helm-{{ helm_version }}-linux-amd64.tar.gz"
        dest: "/tmp/helm-{{ helm_version }}-linux-amd64.tar.gz"
        mode: '0644'
      when: uninstall_helm | bool

    - name: Extract Helm binary
      ansible.builtin.unarchive:
        src: "/tmp/helm-{{ helm_version }}-linux-amd64.tar.gz"
        dest: /tmp
        remote_src: true
        creates: /tmp/linux-amd64/helm
      when: uninstall_helm | bool

    - name: Install Helm binary
      ansible.builtin.copy:
        src: /tmp/linux-amd64/helm
        dest: /usr/local/bin/helm
        mode: '0755'
        remote_src: true
      when: uninstall_helm | bool

    - name: Verify Helm installation
      ansible.builtin.command: helm version --short
      register: helm_version_output
      changed_when: false
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      when: uninstall_helm | bool

    - name: Display Helm version
      ansible.builtin.debug:
        msg: "Helm version: {{ helm_version_output.stdout }}"
      when: uninstall_helm | bool

    - name: Create backup of Rancher resources before uninstall
      when: create_backup | bool
      block:
        - name: Create backup directory
          ansible.builtin.file:
            path: "{{ backup_path | dirname }}"
            state: directory
            mode: '0755'

        - name: Backup Rancher Helm values
          ansible.builtin.command: "helm get values rancher -n {{ rancher_namespace }}"
          register: rancher_values_backup
          changed_when: false
          environment:
            KUBECONFIG: "{{ kubeconfig_path }}"
          failed_when: false

        - name: Save Rancher values to backup file
          ansible.builtin.copy:
            content: "{{ rancher_values_backup.stdout }}"
            dest: "{{ backup_path }}-values.yaml"
            mode: '0644'
          when: rancher_values_backup.stdout != ""

        - name: Backup all resources in Rancher namespace
          ansible.builtin.command: "kubectl get all -n {{ rancher_namespace }} -o yaml"
          register: rancher_resources_backup
          changed_when: false
          environment:
            KUBECONFIG: "{{ kubeconfig_path }}"
          failed_when: false

        - name: Save namespace resources to backup file
          ansible.builtin.copy:
            content: "{{ rancher_resources_backup.stdout }}"
            dest: "{{ backup_path }}-resources.yaml"
            mode: '0644'
          when: rancher_resources_backup.stdout != ""

    - name: Display backup location
      ansible.builtin.debug:
        msg: "Rancher backup created at: {{ backup_path }}"
      when: create_backup | bool

    - name: Check if Rancher is installed
      ansible.builtin.command: "helm list -n {{ rancher_namespace }} | grep rancher"
      register: rancher_check
      changed_when: false
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      failed_when: false

    - name: Display uninstall status
      ansible.builtin.debug:
        msg: "Rancher is installed and will be uninstalled"
      when: rancher_check.rc == 0

    - name: Display already uninstalled status
      ansible.builtin.debug:
        msg: "Rancher is not installed - nothing to uninstall"
      when: rancher_check.rc != 0

    - name: Uninstall Rancher using Helm
      kubernetes.core.helm:
        name: rancher
        release_namespace: "{{ rancher_namespace }}"
        state: absent
        wait: true
        wait_timeout: "300s"
        force: "{{ force_uninstall }}"
      when: rancher_check.rc == 0
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: Wait for Rancher pods to terminate
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Pod
        namespace: "{{ rancher_namespace }}"
        label_selectors:
          - app=rancher
        kubeconfig: "{{ kubeconfig_path }}"
      register: rancher_pods_check
      until: rancher_pods_check.resources | length == 0
      retries: 30
      delay: 10
      when: rancher_check.rc == 0

    - name: Check if cert-manager was installed by Rancher
      ansible.builtin.command: "helm list -n cert-manager | grep cert-manager"
      register: cert_manager_check
      changed_when: false
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      failed_when: false
      when: remove_cert_manager | bool

    - name: Uninstall cert-manager
      kubernetes.core.helm:
        name: cert-manager
        release_namespace: cert-manager
        state: absent
        wait: true
        wait_timeout: "300s"
      when: remove_cert_manager | bool and cert_manager_check.rc == 0
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: Wait for cert-manager pods to terminate
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Pod
        namespace: cert-manager
        kubeconfig: "{{ kubeconfig_path }}"
      register: cert_manager_pods_check
      until: cert_manager_pods_check.resources | length == 0
      retries: 30
      delay: 10
      when: remove_cert_manager | bool and cert_manager_check.rc == 0

    - name: Remove cert-manager namespace
      kubernetes.core.k8s:
        name: cert-manager
        api_version: v1
        kind: Namespace
        state: absent
        wait: true
        wait_timeout: 300
      when: remove_cert_manager | bool and cert_manager_check.rc == 0
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: Remove Rancher namespace
      kubernetes.core.k8s:
        name: "{{ rancher_namespace }}"
        api_version: v1
        kind: Namespace
        state: absent
        wait: true
        wait_timeout: 300
      when: remove_namespace | bool
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"

    - name: Remove Helm repositories
      ansible.builtin.command: "helm repo remove {{ item }}"
      changed_when: false
      environment:
        KUBECONFIG: "{{ kubeconfig_path }}"
      failed_when: false
      loop:
        - "{{ rancher_helm_chart_repo_name | default('rancher-latest') }}"
        - jetstack
      when: remove_helm_repos | bool

    - name: Final verification - check for remaining Rancher resources
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Pod
        namespace: "{{ rancher_namespace }}"
        kubeconfig: "{{ kubeconfig_path }}"
      register: final_check
      failed_when: false

    - name: Display uninstall completion status
      ansible.builtin.debug:
        msg: |
          ========================================
          Rancher Uninstall Complete!
          ========================================
          Namespace: {{ rancher_namespace }}
          Status: Successfully uninstalled
          Backup Location: {{ backup_path if create_backup else 'No backup created' }}
          Remaining Resources: {{ final_check.resources | length if final_check.resources is defined else 0 }}
          ========================================
      when: rancher_check.rc == 0

    - name: Display no action status
      ansible.builtin.debug:
        msg: |
          ========================================
          No Action Required
          ========================================
          Rancher was not installed
          ========================================
      when: rancher_check.rc != 0

  rescue:
    - name: Display uninstall failure
      ansible.builtin.debug:
        msg: |
          ========================================
          Rancher Uninstall Failed!
          ========================================
          Check the error messages above for details.
          Backup location (if created): {{ backup_path if create_backup else 'No backup created' }}
          ========================================

  always:
    - name: Remove temporary Helm files
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - "/tmp/helm-{{ helm_version }}-linux-amd64.tar.gz"
        - "/tmp/linux-amd64"
      when: uninstall_helm | bool