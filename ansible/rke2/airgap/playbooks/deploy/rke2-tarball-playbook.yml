---
- name: RKE2 Airgap Deployment - Tarball Installation
  hosts: bastion
  become: true
  gather_facts: true

  tasks:
    - name: Download and prepare RKE2 tarball bundle
      include_role:
        name: rke2_tarball

- name: Install RKE2 on airgap nodes
  hosts: airgap_nodes
  become: true
  gather_facts: true
  serial: 1  # Install one node at a time for stability

  tasks:
    - name: Install RKE2 from tarball
      include_role:
        name: rke2_install

- name: Verify RKE2 installation
  hosts: airgap_nodes[0]  # First server node
  gather_facts: false
  tasks:
    - name: Wait for RKE2 to be fully ready
      wait_for:
        path: /etc/rancher/rke2/rke2.yaml
        timeout: 300
      become: true

    - name: Check RKE2 server status
      systemd:
        name: rke2-server
        state: started
      become: true
      register: rke2_status

    - name: Display RKE2 status
      debug:
        msg: |
          RKE2 Server Status: {{ rke2_status.status.ActiveState }}
          RKE2 is {{ 'running' if rke2_status.status.ActiveState == 'active' else 'not running' }}

    - name: Get cluster nodes (if kubectl is available)
      shell: |
        export KUBECONFIG=/etc/rancher/rke2/rke2.yaml
        /var/lib/rancher/rke2/bin/kubectl get nodes -o wide
      become: true
      register: cluster_nodes
      failed_when: false
      changed_when: false

    - name: Display cluster information
      debug:
        msg: |
          RKE2 Cluster Information:
          {{ cluster_nodes.stdout if cluster_nodes.rc == 0 else 'kubectl not available or cluster not ready' }}
      when: cluster_nodes is defined

    - name: Display kubeconfig location
      debug:
        msg: |
          RKE2 Installation Complete!
          
          Kubeconfig locations:
          - Server: /etc/rancher/rke2/rke2.yaml
          - Local copy: ~/.kube/config (if copied successfully)
          
          To use kubectl:
          export KUBECONFIG=/etc/rancher/rke2/rke2.yaml
          /var/lib/rancher/rke2/bin/kubectl get nodes
          
          Or add RKE2 bin directory to PATH:
          export PATH=$PATH:/var/lib/rancher/rke2/bin

- name: Setup kubectl access on bastion node
  hosts: bastion
  become: true
  gather_facts: true
  tasks:
   - name: Extract Kubernetes version from RKE2 version
     set_fact:
       k8s_version: "{{ rke2_version | regex_replace('^v([0-9]+\\.[0-9]+\\.[0-9]+).*', 'v\\1') }}"

   - name: Display Kubernetes version for kubectl
     debug:
       msg: "Installing kubectl version {{ k8s_version }} to match RKE2 {{ rke2_version }}"

   - name: Download kubectl binary matching RKE2 Kubernetes version
     get_url:
       url: "https://dl.k8s.io/release/{{ k8s_version }}/bin/linux/amd64/kubectl"
       dest: /usr/local/bin/kubectl
       mode: '0755'
       owner: root
       group: root
     register: kubectl_download
     retries: 3
     delay: 5

   - name: Verify kubectl installation
     command: kubectl version --client
     register: kubectl_version
     changed_when: false

   - name: Display kubectl version
     debug:
       msg: "kubectl installed: {{ kubectl_version.stdout }}"

   - name: Create .kube directory for root
     file:
       path: /root/.kube
       state: directory
       mode: '0700'
       owner: root
       group: root

   - name: Create .kube directory for ansible user
     file:
       path: "/home/{{ ansible_user }}/.kube"
       state: directory
       mode: '0700'
       owner: "{{ ansible_user }}"
       group: "{{ ansible_user }}"
     when: ansible_user is defined and ansible_user != 'root'

   - name: Fetch KUBECONFIG from first airgap node
     fetch:
       src: /etc/rancher/rke2/rke2.yaml
       dest: /tmp/rke2-{{ inventory_hostname }}.yaml
       flat: yes
     delegate_to: "{{ groups['airgap_nodes'][0] }}"
     become: true

   - name: Read kubeconfig content
     slurp:
       src: "/tmp/rke2-{{ inventory_hostname }}.yaml"
     register: kubeconfig_content
     delegate_to: localhost
     become: false

   - name: Update server URL in kubeconfig content
     set_fact:
       updated_kubeconfig: "{{ (kubeconfig_content.content | b64decode) | regex_replace('https://127\\.0\\.0\\.1:6443', 'https://' + hostvars[groups['airgap_nodes'][0]]['ansible_host'] + ':6443') }}"

   - name: Write kubeconfig to bastion root
     copy:
       content: "{{ updated_kubeconfig }}"
       dest: /root/.kube/config
       mode: '0600'
       owner: root
       group: root

   - name: Write kubeconfig to ansible user
     copy:
       content: "{{ updated_kubeconfig }}"
       dest: "/home/{{ ansible_user }}/.kube/config"
       mode: '0600'
       owner: "{{ ansible_user }}"
       group: "{{ ansible_user }}"
     when: ansible_user is defined and ansible_user != 'root'

   - name: Clean up temporary kubeconfig
     file:
       path: "/tmp/rke2-{{ inventory_hostname }}.yaml"
       state: absent
     delegate_to: localhost
     become: false

   - name: Test kubectl connectivity
     shell: kubectl get nodes -o wide
     environment:
       KUBECONFIG: /root/.kube/config
     register: kubectl_test
     failed_when: false
     changed_when: false

   - name: Display kubectl test results
     debug:
       msg: |
         kubectl connectivity test:
         {% if kubectl_test.rc == 0 %}
         SUCCESS - Cluster accessible from bastion:
         {{ kubectl_test.stdout }}
         {% else %}
         FAILED - Error connecting to cluster:
         {{ kubectl_test.stderr }}
         {% endif %}

   - name: Display final instructions
     debug:
       msg: |
         ðŸŽ‰ RKE2 Cluster Setup Complete!
         
         âœ… RKE2 cluster deployed on airgap nodes
         âœ… kubectl installed on bastion node
         âœ… KUBECONFIG copied and configured
         
         To manage your cluster from the bastion node:
         
         As root:
         kubectl get nodes
         kubectl get pods -A
         
         As {{ ansible_user | default('your user') }}:
         kubectl get nodes
         kubectl get pods -A
         
         The kubeconfig is located at:
         - /root/.kube/config
         {% if ansible_user is defined and ansible_user != 'root' %}
         - /home/{{ ansible_user }}/.kube/config
         {% endif %}