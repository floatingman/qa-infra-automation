---
- name: Setup kubectl access on bastion node
  hosts: bastion
  become: true
  gather_facts: true
  vars:
    kubectl_version: "v1.31.11"  # Should match RKE2 Kubernetes version
  
  tasks:
    - name: Download kubectl binary
      get_url:
        url: "https://dl.k8s.io/release/{{ kubectl_version }}/bin/linux/amd64/kubectl"
        dest: /usr/local/bin/kubectl
        mode: '0755'
        owner: root
        group: root
      register: kubectl_download
      retries: 3
      delay: 5

    - name: Verify kubectl installation
      command: kubectl version --client
      register: kubectl_version_output
      changed_when: false

    - name: Display kubectl version
      debug:
        msg: "kubectl installed: {{ kubectl_version_output.stdout }}"

    - name: Create .kube directory for root
      file:
        path: /root/.kube
        state: directory
        mode: '0700'
        owner: root
        group: root

    - name: Create .kube directory for ansible user
      file:
        path: "/home/{{ ansible_user }}/.kube"
        state: directory
        mode: '0700'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
      when: ansible_user is defined and ansible_user != 'root'

    - name: Fetch KUBECONFIG from first airgap node
      fetch:
        src: /etc/rancher/rke2/rke2.yaml
        dest: /tmp/rke2-{{ inventory_hostname }}.yaml
        flat: yes
      delegate_to: "{{ groups['airgap_nodes'][0] }}"
      become: true

    - name: Read kubeconfig content
      slurp:
        src: "/tmp/rke2-{{ inventory_hostname }}.yaml"
      register: kubeconfig_content
      delegate_to: localhost
      become: false

    - name: Update server URL in kubeconfig content
      set_fact:
        updated_kubeconfig: "{{ (kubeconfig_content.content | b64decode) | regex_replace('https://127\\.0\\.0\\.1:6443', 'https://' + hostvars[groups['airgap_nodes'][0]]['ansible_host'] + ':6443') }}"

    - name: Write kubeconfig to bastion root
      copy:
        content: "{{ updated_kubeconfig }}"
        dest: /root/.kube/config
        mode: '0600'
        owner: root
        group: root

    - name: Write kubeconfig to ansible user
      copy:
        content: "{{ updated_kubeconfig }}"
        dest: "/home/{{ ansible_user }}/.kube/config"
        mode: '0600'
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
      when: ansible_user is defined and ansible_user != 'root'

    - name: Clean up temporary kubeconfig
      file:
        path: "/tmp/rke2-{{ inventory_hostname }}.yaml"
        state: absent
      delegate_to: localhost
      become: false

    - name: Test kubectl connectivity
      shell: kubectl get nodes -o wide
      environment:
        KUBECONFIG: /root/.kube/config
      register: kubectl_test
      failed_when: false
      changed_when: false

    - name: Display kubectl test results
      debug:
        msg: |
          kubectl connectivity test:
          {% if kubectl_test.rc == 0 %}
          SUCCESS - Cluster accessible from bastion:
          {{ kubectl_test.stdout }}
          {% else %}
          FAILED - Error connecting to cluster:
          {{ kubectl_test.stderr }}
          
          Troubleshooting steps:
          1. Verify RKE2 is running on airgap nodes
          2. Check network connectivity from bastion to airgap nodes
          3. Verify kubeconfig server URL is correct
          {% endif %}

    - name: Display final instructions
      debug:
        msg: |
          ðŸŽ‰ kubectl Access Setup Complete!
          
          âœ… kubectl installed on bastion node
          âœ… KUBECONFIG copied and configured
          
          To manage your cluster from the bastion node:
          
          As root:
          kubectl get nodes
          kubectl get pods -A
          kubectl get services -A
          
          As {{ ansible_user | default('your user') }}:
          kubectl get nodes
          kubectl get pods -A
          kubectl get services -A
          
          The kubeconfig is located at:
          - /root/.kube/config
          {% if ansible_user is defined and ansible_user != 'root' %}
          - /home/{{ ansible_user }}/.kube/config
          {% endif %}
          
          You can also use kubectl with explicit kubeconfig:
          kubectl --kubeconfig=/root/.kube/config get nodes